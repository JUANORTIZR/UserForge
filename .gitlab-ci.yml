variables:
  VERSION: "1.0.${CI_PIPELINE_ID}"
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
  AWS_REGISTRY: "${AWS_REGISTRY}"

stages:
  - version
  - build
  - push_image
  - deploy_service

build_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t "$AWS_REGISTRY:$VERSION" .
    - docker save "$AWS_REGISTRY:$VERSION"| gzip > image.tar.gz
  artifacts:
    paths:
      - image.tar.gz
    expire_in: 1 hour
  only:
    - develop

push_image:
  stage: push_image
  image: docker:latest
  before_script:
    - apk add --no-cache aws-cli
  services:
    - docker:dind
  script:
    - gunzip -c image.tar.gz | docker load
    - docker tag "$AWS_REGISTRY:$VERSION" $AWS_REGISTRY:latest
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 533267189619.dkr.ecr.us-west-2.amazonaws.com
    - docker push "$AWS_REGISTRY:$VERSION"
    - docker push $AWS_REGISTRY:latest

  dependencies:
    - build_image
  only:
    - develop
deploy_service:
  stage: deploy_service
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  script:
    - echo "deploying in kubernetes cluster ..."
    - kubectl config use-context "${KUBE_CONTEXT}:${GITLAB_AGENT}"
    - envsubst < manifests/managment.yaml | kubectl apply -f - 